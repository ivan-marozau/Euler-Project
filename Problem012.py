## Highly divisible triangular number
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import time
start = time.clock()

def divisors(n):
	if n == 1: return 1
	divisors_count = 2*sum([1 for i in range(2,int(n**0.5)+1) if n % i == 0])
	if n**0.5 == int(n**0.5): return divisors_count + 1
	return divisors_count + 2

num = 1
triangle = 1
while divisors(triangle) <= 500:
	num += 1
	triangle += num
print (triangle)

end = time.clock()
print ("Running time: %s seconds" % (end - start))
