## Even Fibonacci numbers
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import time
start = time.clock()

def fibonacci_6():
	lst = []
	a, b = 1, 1
	while len(lst) < 6:
		lst.append(a)
		a += b
		lst.append(b)
		b += a
	return lst
# The fuction creates the list of first six Fibonacci numbers, starting with 1 and 1.
	
def SumOfEvenFib(limit):
	lst = fibonacci_6() # getting the list of first six Fibonacci numbers.
	a = lst[2] 
	b = lst[5]
	c = a + 4*b
	res = a+b+c
	while True:
		a = b + 4*c
		b = c + 4*a 
		c = a + 4*b
		if c <= limit:
			res += a+b+c
		elif b <= limit:
			res += a+b
		elif a <= limit:
			res += a
		else:
			break
	return res
# Since every third number in Fibonacci sequence is even and all Fibonacci numbers obey the following recursive relation:
#								F(n)=4*F(n-3)+F(n-6) 
# we get the working function to find a sum of even Fibonacci numbers whose values do not exceed defined limit.
		
print (SumOfEvenFib(4*10**6))

end = time.clock()
print ("Running time: %s seconds" % (end - start))
